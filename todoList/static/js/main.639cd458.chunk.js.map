{"version":3,"sources":["commponent/Input/index.js","commponent/List/index.js","views/Todolist/index.js","serviceWorker.js","index.js"],"names":["Input2","props","context","state","value","e","this","setState","target","text","keyCode","trim","addTodoList","className","placeholder","onKeyUp","handleSubmit","bind","onChange","handleChange","React","Component","List","lastname","JSON","parse","localStorage","getItem","todos","map","item","index","key","Todolist","id","Date","now","todo","array2","unshift","array","concat","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iQAmCeA,G,kBA9Bb,WAAYC,EAAMC,GAAS,IAAD,8BACxB,4CAAMD,EAAMC,KACPC,MAAQ,CAEXC,MAAM,IAJgB,E,0EAObC,GACXC,KAAKC,SAAS,CACZH,MAAMC,EAAEG,OAAOJ,U,mCAGNC,GAEX,IAAII,EAAOH,KAAKH,MAAMC,MACL,KAAdC,EAAEK,SAAkBD,EAAKE,SAC1BL,KAAKL,MAAMW,YAAaH,GACxBH,KAAKC,SAAS,CACZH,MAAM,Q,+BAKV,OACE,yBAAKS,UAAU,SACb,kBAAC,IAAD,CAAOC,YAAY,uCAASC,QAAST,KAAKU,aAAaC,KAAKX,MAAOY,SAAUZ,KAAKa,aAAaF,KAAKX,MAAOF,MAAOE,KAAKH,MAAMC,a,GA1BhHgB,IAAMC,YCoBZC,G,mBArBb,WAAYrB,EAAMC,GAAS,qEACnBD,EAAMC,I,sEAGZ,IAAIqB,EAAWC,KAAKC,MAAMC,aAAaC,QAAQ,aAC3CC,EAAQL,GAAsB,GAClC,OACE,yBAAKV,UAAU,QACb,4BAEIe,EAAMC,KAAI,SAACC,EAAKC,GACd,OACE,wBAAIC,IAAKD,GAAQD,EAAK1B,gB,GAbnBgB,IAAMC,YCqCVY,G,mBAjCb,WAAYhC,EAAOC,GAAU,IAAD,8BAC1B,4CAAMD,EAAOC,KACRC,MAAQ,CACXyB,MAAO,IAHiB,E,yEAOfxB,GACX,IAAM8B,EAAKC,KAAKC,MACZC,EAAO,GACXA,EAAKH,GAAGA,EACRG,EAAKjC,MAAQA,EAJK,IAKbwB,EAAStB,KAAKH,MAAdyB,MACDU,EAAS,GACbV,EAAMW,QAAQF,GACdC,EAAOC,QAAQF,GACf,IAAId,EAAWC,KAAKC,MAAMC,aAAaC,QAAQ,aAC3Ca,EAAQjB,EAAUe,EAAOG,OAAOlB,GAAUK,EAC9CtB,KAAKC,SAAS,CACZqB,MAAMY,IAERd,aAAagB,QAAQ,WAAYlB,KAAKmB,UAAUH,M,+BAIhD,OACE,yBAAK3B,UAAU,WACX,kBAAC,EAAD,CAAOD,YAAaN,KAAKM,YAAYK,KAAKX,QAC1C,kBAAC,EAAD,CAAMsB,MAAOtB,KAAKH,MAAMyB,a,GA7BXR,IAAMC,YCOTuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAAcC,SAASC,eAAe,SD4HhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.639cd458.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Input } from 'antd';\r\n\r\nimport './index.css'\r\nclass Input2 extends React.Component {\r\n  constructor(props,context){\r\n    super(props,context)\r\n    this.state = {\r\n      // 初始化state\r\n      value:''\r\n    }\r\n  }\r\n  handleChange(e){\r\n    this.setState({\r\n      value:e.target.value\r\n    })\r\n  }\r\n  handleSubmit(e){\r\n    // debugger\r\n    let text = this.state.value;\r\n    if(e.keyCode === 13 && text.trim()){\r\n      this.props.addTodoList (text);\r\n      this.setState({\r\n        value:''\r\n      })\r\n    }\r\n  }\r\n  render(){\r\n    return(\r\n      <div className=\"input\">\r\n        <Input placeholder=\"想去干嘛呢？\" onKeyUp={this.handleSubmit.bind(this)} onChange={this.handleChange.bind(this)} value={this.state.value}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Input2","import React from 'react'\r\nimport './index.css'\r\nclass List extends React.Component {\r\n  constructor(props,context){\r\n    super(props,context)\r\n  }\r\n  render(){\r\n    var lastname = JSON.parse(localStorage.getItem(\"lastname\"));\r\n    let todos = lastname ? lastname : [];\r\n    return(\r\n      <div className=\"list\">\r\n        <ul>\r\n          {\r\n            todos.map((item,index) => {\r\n              return (\r\n                <li key={index}>{item.value}</li>\r\n              )\r\n            })\r\n          }\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default List","import React from 'react';\r\nimport Input from './../../commponent/Input';\r\nimport List from './../../commponent/List';\r\nimport './index.css'\r\n\r\nclass Todolist extends React.Component {\r\n  constructor(props, context) {\r\n    super(props, context)\r\n    this.state = {\r\n      todos: []\r\n    }\r\n  }\r\n   // 添加单条数据\r\n   addTodoList(value) {\r\n    const id = Date.now();\r\n    let todo = {};\r\n    todo.id=id;\r\n    todo.value = value;\r\n    let {todos} = this.state;\r\n    var array2 = []\r\n    todos.unshift(todo);\r\n    array2.unshift(todo);\r\n    var lastname = JSON.parse(localStorage.getItem(\"lastname\"));\r\n    var array = lastname? array2.concat(lastname):todos\r\n    this.setState({\r\n      todos:array\r\n    })\r\n    localStorage.setItem(\"lastname\", JSON.stringify(array));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"warpper\">\r\n          <Input addTodoList={this.addTodoList.bind(this)} />\r\n          <List todos={this.state.todos}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Todolist;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Todolist from './views/Todolist/index';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<Todolist />, document.getElementById('root'));\nserviceWorker.unregister();"],"sourceRoot":""}